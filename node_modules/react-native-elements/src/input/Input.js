import React from 'react';
import PropTypes from 'prop-types';
import {
  Text,
  View,
  TextInput,
  Animated,
  Easing,
  Platform,
  StyleSheet,
} from 'react-native';
import CustomText from 'AppLevelComponents/UI/CustomText'
import Fonts from "UIProps/Fonts";
import { nodeType, renderNode } from '../helpers';
import { fonts, withTheme, ViewPropTypes, TextPropTypes } from '../config';

import Icon from '../icons/Icon';
import { value } from 'react-native-extended-stylesheet';

const renderText = (content, defaultProps, style) =>
  renderNode(Text, content, {
    ...defaultProps,
    style: StyleSheet.flatten([style, defaultProps && defaultProps.style]),
  });

  let labelStartPos = 19

  let inputFocused = false
class Input extends React.Component {
  shakeAnimationValue = new Animated.Value(0);

  constructor(props) {
    super(props)
  
    this.labelTop = new Animated.Value(labelStartPos)
  };
  
  focus() {
    this.input.focus();
  }

  blur() {
    this.input.blur();
  }

  clear() {
    this.input.clear();
  }

  isFocused() {
    return this.input.isFocused();
  }

  setNativeProps(nativeProps) {
    this.input.setNativeProps(nativeProps);
  }

  shake = () => {
    const { shakeAnimationValue } = this;

    shakeAnimationValue.setValue(0);
    // Animation duration based on Material Design
    // https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
    Animated.timing(shakeAnimationValue, {
      duration: 375,
      toValue: 3,
      ease: Easing.bounce,
    }).start();
  };

  animateLabel(){
    
    Animated.timing(this.labelTop,{
      toValue:-4.4,
      duration:400
    }).start()
  }

  resetLabelPos(text){
    if(!text){

      Animated.timing(this.labelTop,{
        toValue:labelStartPos,
        duration:400
      }).start()
    }
  }


  render() {
    const {
      containerStyle,
      inputContainerStyle,
      leftIcon,
      leftIconContainerStyle,
      rightIcon,
      rightIconContainerStyle,
      inputComponent: InputComponent = TextInput,
      inputStyle,
      errorProps,
      errorStyle,
      errorMessage,
      label,
      labelStyle,
      labelProps,
      theme,
      value,
      ...attributes
    } = this.props;
    const translateX = this.shakeAnimationValue.interpolate({
      inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],
      outputRange: [0, -15, 0, 15, 0, -15, 0],
    });

    let topVal 
    if(value  ){
      if(this.input && this.input.isFocused()){
        topVal = this.labelTop
      } else {
        topVal = -4.4
      }
    } else {
      topVal = this.labelTop
    }
    return (
      <View style={StyleSheet.flatten([styles.container, containerStyle])}>

        <Animated.View pointerEvents='none' style={{top:topVal,zIndex:1}}>

        {renderText(
          label,
          { style: labelStyle, ...labelProps },
          styles.label(theme)
          )}
          </Animated.View>



        <Animated.View
          style={StyleSheet.flatten([
            styles.inputContainer(theme),
            inputContainerStyle,
            { transform: [{ translateX }] },
          ])}
        >
          {leftIcon && (
            <View
              style={StyleSheet.flatten([
                styles.iconContainer,
                leftIconContainerStyle,
              ])}
            >
              {renderNode(Icon, leftIcon)}
            </View>
          )}

          <InputComponent
            testID="RNE__Input__text-input"
            underlineColorAndroid="transparent"
            {...attributes}
            ref={ref => {
              this.input = ref;
            }}
            value={value}
            onBlur={()=>this.resetLabelPos(this.input._lastNativeText)}
            onFocus={()=>this.animateLabel()}
            style={StyleSheet.flatten([styles.input, inputStyle])}
          />

{!!errorMessage && (
  <Text
    {...errorProps}
    style={StyleSheet.flatten([
      styles.error(theme),
      errorStyle && errorStyle,
    ])}
  >
    {errorMessage}
  </Text>
)}

          {rightIcon && (
            <View
              style={StyleSheet.flatten([
                styles.iconContainer,
                rightIconContainerStyle,
              ])}
            >
              {renderNode(Icon, rightIcon)}
            </View>
          )}



        </Animated.View>

        
      </View>
    );
  }
}

Input.propTypes = {
  containerStyle: ViewPropTypes.style,
  inputContainerStyle: ViewPropTypes.style,
  leftIcon: nodeType,
  leftIconContainerStyle: ViewPropTypes.style,
  rightIcon: nodeType,
  rightIconContainerStyle: ViewPropTypes.style,
  inputStyle: TextPropTypes.style,
  inputComponent: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  // eslint-disable-next-line react/forbid-prop-types
  shake: PropTypes.any,
  errorProps: PropTypes.object,
  errorStyle: TextPropTypes.style,
  errorMessage: PropTypes.string,
  label: PropTypes.node,
  labelStyle: TextPropTypes.style,
  labelProps: PropTypes.object,
  theme: PropTypes.object,
};

const styles = {
  container: {
    // flex:1,
  },
  inputContainer: theme => ({
    flexDirection: 'row',
    borderBottomWidth: 1,
    alignItems: 'center',
    borderColor: theme.colors.grey3,
  }),
  iconContainer: {
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 15,
  },
  input: {
    alignSelf: 'center',
    color: 'black',
    fontSize: 15,
    flex: 1,
    fontWeight: "500",
    fontFamily:Fonts.medium,
    minHeight: 40,
  },
  error: theme => ({
    margin: 5,
    fontSize: 12,
    color: theme.colors.error,
  }),
  label: theme => ({
    fontSize: 16,
    color: theme.colors.grey3,
    ...Platform.select({
      android: {
        ...fonts.android.bold,
      },
      default: {
        fontWeight: 'bold',
      },
    }),
  }),
};

export { Input };
export default withTheme(Input, 'Input');
